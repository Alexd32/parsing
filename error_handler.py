import asyncio
import httpx

class ErrorHandler:
    def __init__(self, retries=3, backoff=3):
        """
        retries ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–±–æ–≤–∞—Ç—å
        backoff ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        """
        self.retries = retries
        self.backoff = backoff

    async def handle(self, coro, url: str):
        """
        coro ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä fetcher.get
        url ‚Äî –∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        for attempt in range(1, self.retries + 1):
            try:
                return await coro(url)  # –ø—Ä–æ–±—É–µ–º
            except httpx.ConnectTimeout:
                print(f"‚è± –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({url}), –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
            except httpx.ReadTimeout:
                print(f"üì≠ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è ({url}), –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
            except httpx.HTTPStatusError as e:
                code = e.response.status_code
                if code in (500, 502, 503, 504):
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {code} ({url}), –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                elif code == 404:
                    print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {url} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return None
                else:
                    print(f"‚ö†Ô∏è HTTP {code} ({url}), –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")

            if attempt < self.retries:
                wait_time = self.backoff * attempt
                print(f"‚è≥ –ñ–¥—ë–º {wait_time} —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                await asyncio.sleep(wait_time)

        print(f"üö´ –í—Å–µ {self.retries} –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {url}")
        return None
