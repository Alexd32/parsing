import httpx
import random
import asyncio


class Fetcher:
    def __init__(self, proxies=None, headers=None, rate_limit=1.0):
        self.proxies = proxies or []
        self.headers = headers or {}
        self.rate_limit = rate_limit
        self._last_request = 0

        # —Å–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –∫–ª–∏–µ–Ω—Ç —Å cookie-jar
        self.client = httpx.AsyncClient(
            headers=self.headers,
            timeout=httpx.Timeout(60.0, connect=30.0),
            follow_redirects=True
        )

        if self.proxies:
            # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            self.client.proxies = {"all://": random.choice(self.proxies)}

    async def bootstrap(self, url: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å cookies –∏ —Å–µ—Å—Å–∏—é.
        –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞—é—Ç 401 –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ö–æ–¥–∞.
        """
        try:
            print(f"üåê Bootstrap: –∑–∞–≥—Ä—É–∂–∞–µ–º {url} –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏...")
            resp = await self.client.get(url)
            resp.raise_for_status()
            print(f"   ‚úÖ bootstrap —É—Å–ø–µ—à–µ–Ω, –∫—É–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {list(self.client.cookies.jar)}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è bootstrap –Ω–µ —É–¥–∞–ª—Å—è: {e}")

    async def get(self, url: str) -> str:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å —Å rate-limit –∏ –æ–±—â–∏–º–∏ cookie"""
        now = asyncio.get_event_loop().time()
        if now - self._last_request < self.rate_limit:
            await asyncio.sleep(self.rate_limit - (now - self._last_request))
        self._last_request = asyncio.get_event_loop().time()

        resp = await self.client.get(url)
        resp.raise_for_status()
        return resp.text

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        await self.client.aclose()
